   1               		.file	"process_unicode.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.hex_to_keycode,"ax",@progbits
  11               		.weak	hex_to_keycode
  13               	hex_to_keycode:
  14               	.LVL0:
  15               	.LFB107:
  16               		.file 1 "quantum/process_keycode/process_unicode.c"
   1:quantum/process_keycode/process_unicode.c **** #include "process_unicode.h"
   2:quantum/process_keycode/process_unicode.c **** #include "action_util.h"
   3:quantum/process_keycode/process_unicode.c **** 
   4:quantum/process_keycode/process_unicode.c **** static uint8_t input_mode;
   5:quantum/process_keycode/process_unicode.c **** uint8_t mods;
   6:quantum/process_keycode/process_unicode.c **** 
   7:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
   8:quantum/process_keycode/process_unicode.c **** uint16_t hex_to_keycode(uint8_t hex)
   9:quantum/process_keycode/process_unicode.c **** {
  17               		.loc 1 9 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  10:quantum/process_keycode/process_unicode.c ****   if (hex == 0x0) {
  23               		.loc 1 10 3 view .LVU1
  24               		.loc 1 10 6 is_stmt 0 view .LVU2
  25 0000 8823      		tst r24
  26 0002 01F0      		breq .L4
  11:quantum/process_keycode/process_unicode.c ****     return KC_0;
  12:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  27               		.loc 1 12 10 is_stmt 1 view .LVU3
  28 0004 90E0      		ldi r25,0
  29               		.loc 1 12 13 is_stmt 0 view .LVU4
  30 0006 8A30      		cpi r24,lo8(10)
  31 0008 00F4      		brsh .L3
  13:quantum/process_keycode/process_unicode.c ****     return KC_1 + (hex - 0x1);
  32               		.loc 1 13 5 is_stmt 1 view .LVU5
  33               		.loc 1 13 17 is_stmt 0 view .LVU6
  34 000a 4D96      		adiw r24,29
  35               	.LVL1:
  36               		.loc 1 13 17 view .LVU7
  37 000c 0895      		ret
  38               	.LVL2:
  39               	.L3:
  14:quantum/process_keycode/process_unicode.c ****   } else {
  15:quantum/process_keycode/process_unicode.c ****     return KC_A + (hex - 0xA);
  40               		.loc 1 15 5 is_stmt 1 view .LVU8
  41               		.loc 1 15 17 is_stmt 0 view .LVU9
  42 000e 0697      		sbiw r24,6
  43               	.LVL3:
  44               		.loc 1 15 17 view .LVU10
  45 0010 0895      		ret
  46               	.LVL4:
  47               	.L4:
  11:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  48               		.loc 1 11 12 view .LVU11
  49 0012 87E2      		ldi r24,lo8(39)
  50 0014 90E0      		ldi r25,0
  51               	.LVL5:
  52               	/* epilogue start */
  16:quantum/process_keycode/process_unicode.c ****   }
  17:quantum/process_keycode/process_unicode.c **** }
  53               		.loc 1 17 1 view .LVU12
  54 0016 0895      		ret
  55               		.cfi_endproc
  56               	.LFE107:
  58               		.section	.text.set_unicode_input_mode,"ax",@progbits
  59               	.global	set_unicode_input_mode
  61               	set_unicode_input_mode:
  62               	.LVL6:
  63               	.LFB108:
  18:quantum/process_keycode/process_unicode.c **** 
  19:quantum/process_keycode/process_unicode.c **** void set_unicode_input_mode(uint8_t os_target)
  20:quantum/process_keycode/process_unicode.c **** {
  64               		.loc 1 20 1 is_stmt 1 view -0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  21:quantum/process_keycode/process_unicode.c ****   input_mode = os_target;
  70               		.loc 1 21 3 view .LVU14
  71               		.loc 1 21 14 is_stmt 0 view .LVU15
  72 0000 8093 0000 		sts input_mode,r24
  73               	/* epilogue start */
  22:quantum/process_keycode/process_unicode.c **** }
  74               		.loc 1 22 1 view .LVU16
  75 0004 0895      		ret
  76               		.cfi_endproc
  77               	.LFE108:
  79               		.section	.text.get_unicode_input_mode,"ax",@progbits
  80               	.global	get_unicode_input_mode
  82               	get_unicode_input_mode:
  83               	.LFB109:
  23:quantum/process_keycode/process_unicode.c **** 
  24:quantum/process_keycode/process_unicode.c **** uint8_t get_unicode_input_mode(void) {
  84               		.loc 1 24 38 is_stmt 1 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  25:quantum/process_keycode/process_unicode.c ****   return input_mode;
  90               		.loc 1 25 3 view .LVU18
  26:quantum/process_keycode/process_unicode.c **** }
  91               		.loc 1 26 1 is_stmt 0 view .LVU19
  92 0000 8091 0000 		lds r24,input_mode
  93               	/* epilogue start */
  94 0004 0895      		ret
  95               		.cfi_endproc
  96               	.LFE109:
  98               		.section	.text.unicode_input_start,"ax",@progbits
  99               		.weak	unicode_input_start
 101               	unicode_input_start:
 102               	.LFB110:
  27:quantum/process_keycode/process_unicode.c **** 
  28:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  29:quantum/process_keycode/process_unicode.c **** void unicode_input_start (void) {
 103               		.loc 1 29 33 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  30:quantum/process_keycode/process_unicode.c ****   // save current mods
  31:quantum/process_keycode/process_unicode.c ****   mods = keyboard_report->mods;
 109               		.loc 1 31 3 view .LVU21
 110               		.loc 1 31 25 is_stmt 0 view .LVU22
 111 0000 E091 0000 		lds r30,keyboard_report
 112 0004 F091 0000 		lds r31,keyboard_report+1
 113 0008 8081      		ld r24,Z
 114               		.loc 1 31 8 view .LVU23
 115 000a 8093 0000 		sts mods,r24
  32:quantum/process_keycode/process_unicode.c **** 
  33:quantum/process_keycode/process_unicode.c ****   // unregister all mods to start from clean state
  34:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LSFT)) unregister_code(KC_LSFT);
 116               		.loc 1 34 3 is_stmt 1 view .LVU24
 117               		.loc 1 34 6 is_stmt 0 view .LVU25
 118 000e 81FF      		sbrs r24,1
 119 0010 00C0      		rjmp .L8
 120               		.loc 1 34 32 is_stmt 1 discriminator 1 view .LVU26
 121 0012 81EE      		ldi r24,lo8(-31)
 122 0014 0E94 0000 		call unregister_code
 123               	.LVL7:
 124               	.L8:
  35:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RSFT)) unregister_code(KC_RSFT);
 125               		.loc 1 35 3 view .LVU27
 126               		.loc 1 35 6 is_stmt 0 view .LVU28
 127 0018 8091 0000 		lds r24,mods
 128 001c 85FF      		sbrs r24,5
 129 001e 00C0      		rjmp .L9
 130               		.loc 1 35 32 is_stmt 1 discriminator 1 view .LVU29
 131 0020 85EE      		ldi r24,lo8(-27)
 132 0022 0E94 0000 		call unregister_code
 133               	.LVL8:
 134               	.L9:
  36:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LCTL)) unregister_code(KC_LCTL);
 135               		.loc 1 36 3 view .LVU30
 136               		.loc 1 36 6 is_stmt 0 view .LVU31
 137 0026 8091 0000 		lds r24,mods
 138 002a 80FF      		sbrs r24,0
 139 002c 00C0      		rjmp .L10
 140               		.loc 1 36 32 is_stmt 1 discriminator 1 view .LVU32
 141 002e 80EE      		ldi r24,lo8(-32)
 142 0030 0E94 0000 		call unregister_code
 143               	.LVL9:
 144               	.L10:
  37:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RCTL)) unregister_code(KC_RCTL);
 145               		.loc 1 37 3 view .LVU33
 146               		.loc 1 37 6 is_stmt 0 view .LVU34
 147 0034 8091 0000 		lds r24,mods
 148 0038 84FF      		sbrs r24,4
 149 003a 00C0      		rjmp .L11
 150               		.loc 1 37 32 is_stmt 1 discriminator 1 view .LVU35
 151 003c 84EE      		ldi r24,lo8(-28)
 152 003e 0E94 0000 		call unregister_code
 153               	.LVL10:
 154               	.L11:
  38:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LALT)) unregister_code(KC_LALT);
 155               		.loc 1 38 3 view .LVU36
 156               		.loc 1 38 6 is_stmt 0 view .LVU37
 157 0042 8091 0000 		lds r24,mods
 158 0046 82FF      		sbrs r24,2
 159 0048 00C0      		rjmp .L12
 160               		.loc 1 38 32 is_stmt 1 discriminator 1 view .LVU38
 161 004a 82EE      		ldi r24,lo8(-30)
 162 004c 0E94 0000 		call unregister_code
 163               	.LVL11:
 164               	.L12:
  39:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RALT)) unregister_code(KC_RALT);
 165               		.loc 1 39 3 view .LVU39
 166               		.loc 1 39 6 is_stmt 0 view .LVU40
 167 0050 8091 0000 		lds r24,mods
 168 0054 86FF      		sbrs r24,6
 169 0056 00C0      		rjmp .L13
 170               		.loc 1 39 32 is_stmt 1 discriminator 1 view .LVU41
 171 0058 86EE      		ldi r24,lo8(-26)
 172 005a 0E94 0000 		call unregister_code
 173               	.LVL12:
 174               	.L13:
  40:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LGUI)) unregister_code(KC_LGUI);
 175               		.loc 1 40 3 view .LVU42
 176               		.loc 1 40 6 is_stmt 0 view .LVU43
 177 005e 8091 0000 		lds r24,mods
 178 0062 83FF      		sbrs r24,3
 179 0064 00C0      		rjmp .L14
 180               		.loc 1 40 32 is_stmt 1 discriminator 1 view .LVU44
 181 0066 83EE      		ldi r24,lo8(-29)
 182 0068 0E94 0000 		call unregister_code
 183               	.LVL13:
 184               	.L14:
  41:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RGUI)) unregister_code(KC_RGUI);
 185               		.loc 1 41 3 view .LVU45
 186               		.loc 1 41 6 is_stmt 0 view .LVU46
 187 006c 8091 0000 		lds r24,mods
 188 0070 87FF      		sbrs r24,7
 189 0072 00C0      		rjmp .L15
 190               		.loc 1 41 32 is_stmt 1 discriminator 1 view .LVU47
 191 0074 87EE      		ldi r24,lo8(-25)
 192 0076 0E94 0000 		call unregister_code
 193               	.LVL14:
 194               	.L15:
  42:quantum/process_keycode/process_unicode.c **** 
  43:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 195               		.loc 1 43 3 view .LVU48
 196 007a 8091 0000 		lds r24,input_mode
 197 007e 8130      		cpi r24,lo8(1)
 198 0080 01F0      		breq .L16
 199 0082 8823      		tst r24
 200 0084 01F0      		breq .L17
 201 0086 8230      		cpi r24,lo8(2)
 202 0088 01F0      		breq .L18
 203 008a 8430      		cpi r24,lo8(4)
 204 008c 01F0      		breq .L19
 205               	.L20:
  44:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  45:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  46:quantum/process_keycode/process_unicode.c ****     break;
  47:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  48:quantum/process_keycode/process_unicode.c ****     register_code(KC_LCTL);
  49:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
  50:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
  51:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
  52:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
  53:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
  54:quantum/process_keycode/process_unicode.c ****     break;
  55:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  56:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  57:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
  58:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
  59:quantum/process_keycode/process_unicode.c ****     break;
  60:quantum/process_keycode/process_unicode.c ****   case UC_WINC:
  61:quantum/process_keycode/process_unicode.c ****     register_code(KC_RALT);
  62:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_RALT);
  63:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
  64:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
  65:quantum/process_keycode/process_unicode.c ****   }
  66:quantum/process_keycode/process_unicode.c ****   wait_ms(UNICODE_TYPE_DELAY);
 206               		.loc 1 66 3 view .LVU49
 207               	.LVL15:
 208               	.LBB4:
 209               	.LBI4:
 210               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 211               		.loc 2 166 1 view .LVU50
 212               	.LBB5:
 167:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	double __tmp ;
 213               		.loc 2 168 2 view .LVU51
 169:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 214               		.loc 2 172 2 view .LVU52
 173:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 215               		.loc 2 173 2 view .LVU53
 174:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 216               		.loc 2 174 2 view .LVU54
 175:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 217               		.loc 2 184 3 view .LVU55
 185:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 218               		.loc 2 187 2 view .LVU56
 219 008e 8FE3      		ldi r24,lo8(-25537)
 220 0090 9CE9      		ldi r25,hi8(-25537)
 221 0092 0197      	1:	sbiw r24,1
 222 0094 01F4      		brne 1b
 223 0096 00C0      		rjmp .
 224 0098 0000      		nop
 225               	.LVL16:
 226               	/* epilogue start */
 227               		.loc 2 187 2 is_stmt 0 view .LVU57
 228               	.LBE5:
 229               	.LBE4:
  67:quantum/process_keycode/process_unicode.c **** }
 230               		.loc 1 67 1 view .LVU58
 231 009a 0895      		ret
 232               	.L17:
  45:quantum/process_keycode/process_unicode.c ****     break;
 233               		.loc 1 45 5 is_stmt 1 view .LVU59
 234 009c 82EE      		ldi r24,lo8(-30)
 235 009e 0E94 0000 		call register_code
 236               	.LVL17:
  46:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
 237               		.loc 1 46 5 view .LVU60
 238 00a2 00C0      		rjmp .L20
 239               	.L16:
  48:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
 240               		.loc 1 48 5 view .LVU61
 241 00a4 80EE      		ldi r24,lo8(-32)
 242 00a6 0E94 0000 		call register_code
 243               	.LVL18:
  49:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 244               		.loc 1 49 5 view .LVU62
 245 00aa 81EE      		ldi r24,lo8(-31)
 246 00ac 0E94 0000 		call register_code
 247               	.LVL19:
  50:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 248               		.loc 1 50 5 view .LVU63
 249 00b0 88E1      		ldi r24,lo8(24)
 250 00b2 0E94 0000 		call register_code
 251               	.LVL20:
  51:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
 252               		.loc 1 51 5 view .LVU64
 253 00b6 88E1      		ldi r24,lo8(24)
 254 00b8 0E94 0000 		call unregister_code
 255               	.LVL21:
  52:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
 256               		.loc 1 52 5 view .LVU65
 257 00bc 81EE      		ldi r24,lo8(-31)
 258 00be 0E94 0000 		call unregister_code
 259               	.LVL22:
  53:quantum/process_keycode/process_unicode.c ****     break;
 260               		.loc 1 53 5 view .LVU66
 261 00c2 80EE      		ldi r24,lo8(-32)
 262               	.L42:
  64:quantum/process_keycode/process_unicode.c ****   }
 263               		.loc 1 64 5 is_stmt 0 view .LVU67
 264 00c4 0E94 0000 		call unregister_code
 265               	.LVL23:
 266 00c8 00C0      		rjmp .L20
 267               	.L18:
  56:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
 268               		.loc 1 56 5 is_stmt 1 view .LVU68
 269 00ca 82EE      		ldi r24,lo8(-30)
 270 00cc 0E94 0000 		call register_code
 271               	.LVL24:
  57:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
 272               		.loc 1 57 5 view .LVU69
 273 00d0 87E5      		ldi r24,lo8(87)
 274 00d2 0E94 0000 		call register_code
 275               	.LVL25:
  58:quantum/process_keycode/process_unicode.c ****     break;
 276               		.loc 1 58 5 view .LVU70
 277 00d6 87E5      		ldi r24,lo8(87)
 278 00d8 00C0      		rjmp .L42
 279               	.L19:
  61:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_RALT);
 280               		.loc 1 61 5 view .LVU71
 281 00da 86EE      		ldi r24,lo8(-26)
 282 00dc 0E94 0000 		call register_code
 283               	.LVL26:
  62:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 284               		.loc 1 62 5 view .LVU72
 285 00e0 86EE      		ldi r24,lo8(-26)
 286 00e2 0E94 0000 		call unregister_code
 287               	.LVL27:
  63:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 288               		.loc 1 63 5 view .LVU73
 289 00e6 88E1      		ldi r24,lo8(24)
 290 00e8 0E94 0000 		call register_code
 291               	.LVL28:
  64:quantum/process_keycode/process_unicode.c ****   }
 292               		.loc 1 64 5 view .LVU74
 293 00ec 88E1      		ldi r24,lo8(24)
 294 00ee 00C0      		rjmp .L42
 295               		.cfi_endproc
 296               	.LFE110:
 298               		.section	.text.unicode_input_finish,"ax",@progbits
 299               		.weak	unicode_input_finish
 301               	unicode_input_finish:
 302               	.LFB111:
  68:quantum/process_keycode/process_unicode.c **** 
  69:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  70:quantum/process_keycode/process_unicode.c **** void unicode_input_finish (void) {
 303               		.loc 1 70 34 view -0
 304               		.cfi_startproc
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 0 */
 308               	.L__stack_usage = 0
  71:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 309               		.loc 1 71 3 view .LVU76
 310 0000 8091 0000 		lds r24,input_mode
 311 0004 8130      		cpi r24,lo8(1)
 312 0006 01F4      		brne .+2
 313 0008 00C0      		rjmp .L44
 314 000a 8823      		tst r24
 315 000c 01F0      		breq .L45
 316 000e 8230      		cpi r24,lo8(2)
 317 0010 01F4      		brne .L46
 318               	.L45:
  72:quantum/process_keycode/process_unicode.c ****     case UC_OSX:
  73:quantum/process_keycode/process_unicode.c ****     case UC_WIN:
  74:quantum/process_keycode/process_unicode.c ****       unregister_code(KC_LALT);
 319               		.loc 1 74 7 view .LVU77
 320 0012 82EE      		ldi r24,lo8(-30)
 321               	.L79:
  75:quantum/process_keycode/process_unicode.c ****       break;
  76:quantum/process_keycode/process_unicode.c ****     case UC_LNX:
  77:quantum/process_keycode/process_unicode.c ****       register_code(KC_SPC);
  78:quantum/process_keycode/process_unicode.c ****       unregister_code(KC_SPC);
 322               		.loc 1 78 7 is_stmt 0 view .LVU78
 323 0014 0E94 0000 		call unregister_code
 324               	.LVL29:
  79:quantum/process_keycode/process_unicode.c ****       break;
 325               		.loc 1 79 7 is_stmt 1 view .LVU79
 326               	.L46:
  80:quantum/process_keycode/process_unicode.c ****   }
  81:quantum/process_keycode/process_unicode.c **** 
  82:quantum/process_keycode/process_unicode.c ****   // reregister previously set mods
  83:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LSFT)) register_code(KC_LSFT);
 327               		.loc 1 83 3 view .LVU80
 328               		.loc 1 83 6 is_stmt 0 view .LVU81
 329 0018 8091 0000 		lds r24,mods
 330 001c 81FF      		sbrs r24,1
 331 001e 00C0      		rjmp .L47
 332               		.loc 1 83 32 is_stmt 1 discriminator 1 view .LVU82
 333 0020 81EE      		ldi r24,lo8(-31)
 334 0022 0E94 0000 		call register_code
 335               	.LVL30:
 336               	.L47:
  84:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RSFT)) register_code(KC_RSFT);
 337               		.loc 1 84 3 view .LVU83
 338               		.loc 1 84 6 is_stmt 0 view .LVU84
 339 0026 8091 0000 		lds r24,mods
 340 002a 85FF      		sbrs r24,5
 341 002c 00C0      		rjmp .L48
 342               		.loc 1 84 32 is_stmt 1 discriminator 1 view .LVU85
 343 002e 85EE      		ldi r24,lo8(-27)
 344 0030 0E94 0000 		call register_code
 345               	.LVL31:
 346               	.L48:
  85:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LCTL)) register_code(KC_LCTL);
 347               		.loc 1 85 3 view .LVU86
 348               		.loc 1 85 6 is_stmt 0 view .LVU87
 349 0034 8091 0000 		lds r24,mods
 350 0038 80FF      		sbrs r24,0
 351 003a 00C0      		rjmp .L49
 352               		.loc 1 85 32 is_stmt 1 discriminator 1 view .LVU88
 353 003c 80EE      		ldi r24,lo8(-32)
 354 003e 0E94 0000 		call register_code
 355               	.LVL32:
 356               	.L49:
  86:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RCTL)) register_code(KC_RCTL);
 357               		.loc 1 86 3 view .LVU89
 358               		.loc 1 86 6 is_stmt 0 view .LVU90
 359 0042 8091 0000 		lds r24,mods
 360 0046 84FF      		sbrs r24,4
 361 0048 00C0      		rjmp .L50
 362               		.loc 1 86 32 is_stmt 1 discriminator 1 view .LVU91
 363 004a 84EE      		ldi r24,lo8(-28)
 364 004c 0E94 0000 		call register_code
 365               	.LVL33:
 366               	.L50:
  87:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LALT)) register_code(KC_LALT);
 367               		.loc 1 87 3 view .LVU92
 368               		.loc 1 87 6 is_stmt 0 view .LVU93
 369 0050 8091 0000 		lds r24,mods
 370 0054 82FF      		sbrs r24,2
 371 0056 00C0      		rjmp .L51
 372               		.loc 1 87 32 is_stmt 1 discriminator 1 view .LVU94
 373 0058 82EE      		ldi r24,lo8(-30)
 374 005a 0E94 0000 		call register_code
 375               	.LVL34:
 376               	.L51:
  88:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RALT)) register_code(KC_RALT);
 377               		.loc 1 88 3 view .LVU95
 378               		.loc 1 88 6 is_stmt 0 view .LVU96
 379 005e 8091 0000 		lds r24,mods
 380 0062 86FF      		sbrs r24,6
 381 0064 00C0      		rjmp .L52
 382               		.loc 1 88 32 is_stmt 1 discriminator 1 view .LVU97
 383 0066 86EE      		ldi r24,lo8(-26)
 384 0068 0E94 0000 		call register_code
 385               	.LVL35:
 386               	.L52:
  89:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LGUI)) register_code(KC_LGUI);
 387               		.loc 1 89 3 view .LVU98
 388               		.loc 1 89 6 is_stmt 0 view .LVU99
 389 006c 8091 0000 		lds r24,mods
 390 0070 83FF      		sbrs r24,3
 391 0072 00C0      		rjmp .L53
 392               		.loc 1 89 32 is_stmt 1 discriminator 1 view .LVU100
 393 0074 83EE      		ldi r24,lo8(-29)
 394 0076 0E94 0000 		call register_code
 395               	.LVL36:
 396               	.L53:
  90:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RGUI)) register_code(KC_RGUI);
 397               		.loc 1 90 3 view .LVU101
 398               		.loc 1 90 6 is_stmt 0 view .LVU102
 399 007a 8091 0000 		lds r24,mods
 400 007e 87FF      		sbrs r24,7
 401 0080 00C0      		rjmp .L43
 402               		.loc 1 90 32 is_stmt 1 discriminator 1 view .LVU103
 403 0082 87EE      		ldi r24,lo8(-25)
 404 0084 0C94 0000 		jmp register_code
 405               	.LVL37:
 406               	.L44:
  77:quantum/process_keycode/process_unicode.c ****       unregister_code(KC_SPC);
 407               		.loc 1 77 7 view .LVU104
 408 0088 8CE2      		ldi r24,lo8(44)
 409 008a 0E94 0000 		call register_code
 410               	.LVL38:
  78:quantum/process_keycode/process_unicode.c ****       break;
 411               		.loc 1 78 7 view .LVU105
 412 008e 8CE2      		ldi r24,lo8(44)
 413 0090 00C0      		rjmp .L79
 414               	.L43:
 415               	/* epilogue start */
  91:quantum/process_keycode/process_unicode.c **** }
 416               		.loc 1 91 1 is_stmt 0 view .LVU106
 417 0092 0895      		ret
 418               		.cfi_endproc
 419               	.LFE111:
 421               		.section	.text.register_hex,"ax",@progbits
 422               	.global	register_hex
 424               	register_hex:
 425               	.LVL39:
 426               	.LFB112:
  92:quantum/process_keycode/process_unicode.c **** 
  93:quantum/process_keycode/process_unicode.c **** void register_hex(uint16_t hex) {
 427               		.loc 1 93 33 is_stmt 1 view -0
 428               		.cfi_startproc
 429               		.loc 1 93 33 is_stmt 0 view .LVU108
 430 0000 EF92      		push r14
 431               	.LCFI0:
 432               		.cfi_def_cfa_offset 3
 433               		.cfi_offset 14, -2
 434 0002 FF92      		push r15
 435               	.LCFI1:
 436               		.cfi_def_cfa_offset 4
 437               		.cfi_offset 15, -3
 438 0004 1F93      		push r17
 439               	.LCFI2:
 440               		.cfi_def_cfa_offset 5
 441               		.cfi_offset 17, -4
 442 0006 CF93      		push r28
 443               	.LCFI3:
 444               		.cfi_def_cfa_offset 6
 445               		.cfi_offset 28, -5
 446 0008 DF93      		push r29
 447               	.LCFI4:
 448               		.cfi_def_cfa_offset 7
 449               		.cfi_offset 29, -6
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 5 */
 453               	.L__stack_usage = 5
 454 000a 7C01      		movw r14,r24
  94:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 455               		.loc 1 94 3 is_stmt 1 view .LVU109
 456               	.LBB6:
 457               		.loc 1 94 7 view .LVU110
 458               	.LVL40:
 459               		.loc 1 94 18 view .LVU111
 460               	.LBE6:
  93:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 461               		.loc 1 93 33 is_stmt 0 view .LVU112
 462 000c CCE0      		ldi r28,lo8(12)
 463 000e D0E0      		ldi r29,0
 464               	.LVL41:
 465               	.L81:
 466               	.LBB8:
 467               	.LBB7:
  95:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 468               		.loc 1 95 5 is_stmt 1 discriminator 3 view .LVU113
 469               		.loc 1 95 27 is_stmt 0 discriminator 3 view .LVU114
 470 0010 C701      		movw r24,r14
 471 0012 0C2E      		mov r0,r28
 472 0014 00C0      		rjmp 2f
 473               		1:
 474 0016 9695      		lsr r25
 475 0018 8795      		ror r24
 476               		2:
 477 001a 0A94      		dec r0
 478 001c 02F4      		brpl 1b
 479               		.loc 1 95 13 discriminator 3 view .LVU115
 480 001e 182F      		mov r17,r24
 481 0020 1F70      		andi r17,lo8(15)
 482               	.LVL42:
  96:quantum/process_keycode/process_unicode.c ****     register_code(hex_to_keycode(digit));
 483               		.loc 1 96 5 is_stmt 1 discriminator 3 view .LVU116
 484               		.loc 1 96 19 is_stmt 0 discriminator 3 view .LVU117
 485 0022 812F      		mov r24,r17
 486 0024 0E94 0000 		call hex_to_keycode
 487               	.LVL43:
 488               		.loc 1 96 5 discriminator 3 view .LVU118
 489 0028 0E94 0000 		call register_code
 490               	.LVL44:
  97:quantum/process_keycode/process_unicode.c ****     unregister_code(hex_to_keycode(digit));
 491               		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU119
 492               		.loc 1 97 21 is_stmt 0 discriminator 3 view .LVU120
 493 002c 812F      		mov r24,r17
 494 002e 0E94 0000 		call hex_to_keycode
 495               	.LVL45:
 496               		.loc 1 97 5 discriminator 3 view .LVU121
 497 0032 0E94 0000 		call unregister_code
 498               	.LVL46:
 499               	.LBE7:
  94:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 500               		.loc 1 94 26 is_stmt 1 discriminator 3 view .LVU122
  94:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 501               		.loc 1 94 18 discriminator 3 view .LVU123
 502 0036 2497      		sbiw r28,4
  94:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 503               		.loc 1 94 3 is_stmt 0 discriminator 3 view .LVU124
 504 0038 CC3F      		cpi r28,-4
 505 003a 8FEF      		ldi r24,-1
 506 003c D807      		cpc r29,r24
 507 003e 01F4      		brne .L81
 508               	/* epilogue start */
 509               	.LBE8:
  98:quantum/process_keycode/process_unicode.c ****   }
  99:quantum/process_keycode/process_unicode.c **** }
 510               		.loc 1 99 1 view .LVU125
 511 0040 DF91      		pop r29
 512 0042 CF91      		pop r28
 513 0044 1F91      		pop r17
 514               	.LVL47:
 515               		.loc 1 99 1 view .LVU126
 516 0046 FF90      		pop r15
 517 0048 EF90      		pop r14
 518               	.LVL48:
 519               		.loc 1 99 1 view .LVU127
 520 004a 0895      		ret
 521               		.cfi_endproc
 522               	.LFE112:
 524               		.section	.text.process_unicode,"ax",@progbits
 525               	.global	process_unicode
 527               	process_unicode:
 528               	.LVL49:
 529               	.LFB113:
 100:quantum/process_keycode/process_unicode.c **** 
 101:quantum/process_keycode/process_unicode.c **** bool process_unicode(uint16_t keycode, keyrecord_t *record) {
 530               		.loc 1 101 61 is_stmt 1 view -0
 531               		.cfi_startproc
 532               		.loc 1 101 61 is_stmt 0 view .LVU129
 533 0000 CF93      		push r28
 534               	.LCFI5:
 535               		.cfi_def_cfa_offset 3
 536               		.cfi_offset 28, -2
 537 0002 DF93      		push r29
 538               	.LCFI6:
 539               		.cfi_def_cfa_offset 4
 540               		.cfi_offset 29, -3
 541               	/* prologue: function */
 542               	/* frame size = 0 */
 543               	/* stack size = 2 */
 544               	.L__stack_usage = 2
 545 0004 EC01      		movw r28,r24
 102:quantum/process_keycode/process_unicode.c ****   if (keycode > QK_UNICODE && record->event.pressed) {
 546               		.loc 1 102 3 is_stmt 1 view .LVU130
 547               		.loc 1 102 6 is_stmt 0 view .LVU131
 548 0006 C130      		cpi r28,1
 549 0008 80E8      		ldi r24,-128
 550 000a D807      		cpc r29,r24
 551               	.LVL50:
 552               		.loc 1 102 6 view .LVU132
 553 000c 00F0      		brlo .L84
 554               		.loc 1 102 28 discriminator 1 view .LVU133
 555 000e FB01      		movw r30,r22
 556 0010 8281      		ldd r24,Z+2
 557 0012 8823      		tst r24
 558 0014 01F0      		breq .L84
 559               	.LBB9:
 103:quantum/process_keycode/process_unicode.c ****     uint16_t unicode = keycode & 0x7FFF;
 560               		.loc 1 103 5 is_stmt 1 view .LVU134
 561               	.LVL51:
 104:quantum/process_keycode/process_unicode.c ****     unicode_input_start();
 562               		.loc 1 104 5 view .LVU135
 563 0016 0E94 0000 		call unicode_input_start
 564               	.LVL52:
 105:quantum/process_keycode/process_unicode.c ****     register_hex(unicode);
 565               		.loc 1 105 5 view .LVU136
 566 001a CE01      		movw r24,r28
 567 001c 9F77      		andi r25,127
 568               	.LVL53:
 569               		.loc 1 105 5 is_stmt 0 view .LVU137
 570 001e 0E94 0000 		call register_hex
 571               	.LVL54:
 106:quantum/process_keycode/process_unicode.c ****     unicode_input_finish();
 572               		.loc 1 106 5 is_stmt 1 view .LVU138
 573 0022 0E94 0000 		call unicode_input_finish
 574               	.LVL55:
 575               	.L84:
 576               		.loc 1 106 5 is_stmt 0 view .LVU139
 577               	.LBE9:
 107:quantum/process_keycode/process_unicode.c ****   }
 108:quantum/process_keycode/process_unicode.c ****   return true;
 578               		.loc 1 108 3 is_stmt 1 view .LVU140
 109:quantum/process_keycode/process_unicode.c **** }
 579               		.loc 1 109 1 is_stmt 0 view .LVU141
 580 0026 81E0      		ldi r24,lo8(1)
 581               	/* epilogue start */
 582 0028 DF91      		pop r29
 583 002a CF91      		pop r28
 584               	.LVL56:
 585               		.loc 1 109 1 view .LVU142
 586 002c 0895      		ret
 587               		.cfi_endproc
 588               	.LFE113:
 590               		.comm	mods,1,1
 591               		.section	.bss.input_mode,"aw",@nobits
 594               	input_mode:
 595 0000 00        		.zero	1
 596               		.text
 597               	.Letext0:
 598               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdint.h"
 599               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.4.0/lib/avr-gcc/8/gcc/avr/8.4.0/include/stddef.h"
 600               		.file 5 "./tmk_core/common/keyboard.h"
 601               		.file 6 "./tmk_core/common/action.h"
 602               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 603               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 604               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 605               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 606               		.file 11 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdio.h"
 607               		.file 12 "./tmk_core/common/report.h"
 608               		.file 13 "./tmk_core/common/host.h"
 609               		.file 14 "./tmk_core/common/debug.h"
 610               		.file 15 "./quantum/keycode_config.h"
 611               		.file 16 "./tmk_core/common/keycode.h"
 612               		.file 17 "./quantum/quantum_keycodes.h"
 613               		.file 18 "./quantum/keymap.h"
 614               		.file 19 "./tmk_core/common/action_layer.h"
 615               		.file 20 "./tmk_core/common/timer.h"
 616               		.file 21 "./tmk_core/common/action_util.h"
 617               		.file 22 "/usr/local/Cellar/avr-gcc@8/8.4.0/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_unicode.c
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:4      *ABS*:000000000000003f __SREG__
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:13     .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:61     .text.set_unicode_input_mode:0000000000000000 set_unicode_input_mode
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:594    .bss.input_mode:0000000000000000 input_mode
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:82     .text.get_unicode_input_mode:0000000000000000 get_unicode_input_mode
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:101    .text.unicode_input_start:0000000000000000 unicode_input_start
                            *COM*:0000000000000001 mods
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:301    .text.unicode_input_finish:0000000000000000 unicode_input_finish
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:424    .text.register_hex:0000000000000000 register_hex
/var/folders/mf/5466dhw562q7lyk542tgnwkc0000gn/T//ccaVIA37.s:527    .text.process_unicode:0000000000000000 process_unicode

UNDEFINED SYMBOLS
keyboard_report
unregister_code
register_code
__do_clear_bss
